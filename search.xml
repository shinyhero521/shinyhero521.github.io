<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HashMap小析</title>
    <url>/2018/06/07/HashMap/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1gng9an9eebj31ts0zwhdw.jpg" alt="bmw.png"><br>原文：<br><a href="http://blog.csdn.net/csdn_terence/article/details/77711687">HashMap</a><br><a href="http://blog.csdn.net/qq_25806863/article/details/70607204">数组和链表</a></p>
<h3 id="HashMap的设计原理"><a href="#HashMap的设计原理" class="headerlink" title="HashMap的设计原理"></a>HashMap的设计原理</h3><p>Map&lt;K,V&gt;是一种以键值对存储数据的容器，而HashMap则是借助了键值Key的hashcode值来组织存储，使得可以非常快速和高效地地根据key进行数据的存取。</p>
<h4 id="HashMap设计思路"><a href="#HashMap设计思路" class="headerlink" title="HashMap设计思路"></a>HashMap设计思路</h4><p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1fpi8l746nbj30e80bb0sy.jpg"><br>对于键值对&lt;Key,Value&gt;，HashMap内部会将其封装成一个对应的Entry&lt;Key,Value&gt;对象，即Entry&lt;Key,Value&gt;对象是键值对&lt;Key,Value&gt;的组织形式；<br><img src="http://ww1.sinaimg.cn/large/006s5QLMly1fpi8lqbsgzj30f10co75l.jpg"><br>对于每个对象而言，JVM都会为其生成一个hashcode值。HashMap在存储键值对Entry&lt;Key,Value&gt;的时候，会根据Key的hashcode值，以某种映射关系，决定应当将这对键值对Entry&lt;Key,Value&gt;存储在HashMap中的什么位置上；<br>的Value值存放在什么位置，可以非常高效地将Value值取出。</p>
<h4 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a>HashMap的数据结构</h4><p>数据结构中有数组和链表来实现对数据的存储，但这两者各有利弊。</p>
<p>数组:<br>            数组存储区间是连续的，占用内存严重，故空间复杂度大。但数组的二分查找时间复杂度小，为O(1)；<br>            数组特点：寻址容易，插入和删除困难；</p>
<p>链表:<br>            链表存储区间离散，占用内存比较宽松，故空间复杂度很小，但时间复杂度很大，达O（N）。<br>            链表特点：寻址困难，插入和删除容易。</p>
<p>哈希表:<br>              那么我们综合两者的特性，做出一种寻址容易，插入删除也容易的数据结构，这就是哈希表。哈希表（(Hash table）既满足了数据的查找方便，同时不占用太多的内存空间，使用也十分方便。  </p>
<p>哈希表有多种不同的实现方法，HashMap则使用的是拉链法，也叫作【链地址法】；</p>
<h4 id="HashMap实现"><a href="#HashMap实现" class="headerlink" title="HashMap实现"></a>HashMap实现</h4><p>哈希表是由数组+链表组成的，一个长度为16的数组中，每个元素存储的是一个链表的头结点。那么这些元素是按照什么样的规则存储到数组中呢?<br>一般情况是通过hash(key)%len获得，也就是元素的key的哈希值对数组长度取模得到。比如上述哈希表中:<br> 12%16=12,   28%16=12,  108%16=12,  140%16=12</p>
<p>所以12、28、108以及140都存储在数组下标为12的位置。</p>
<p>　　HashMap其实也是一个线性的数组实现的,所以可以理解为其存储数据的容器就是一个线性数组。这可能让我们很不解，一个线性的数组怎么实现按键值对来存取数据呢？这里HashMap有做一些处理。</p>
<h2 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h2><h3 id="拿几个人一起去看电影时坐座位为例"><a href="#拿几个人一起去看电影时坐座位为例" class="headerlink" title="拿几个人一起去看电影时坐座位为例"></a>拿几个人一起去看电影时坐座位为例</h3><h4 id="数组的特点"><a href="#数组的特点" class="headerlink" title="数组的特点"></a>数组的特点</h4><p>在内存中，数组是一块连续的区域。 拿上面的看电影来说，这几个人在电影院必须坐在一起。<br>数组需要预留空间，在使用前要先申请占内存的大小，可能会浪费内存空间。 比如看电影时，为了保证10个人能坐在一起，必须提前订好10个连续的位置。这样的好处就是能保证10个人可以在一起。但是这样的缺点是，如果来的人不够10个，那么剩下的位置就浪费了。如果临时有多来了个人，那么10个就不够用了，这时可能需要将第11个位置上的人挪走，或者是他们11个人重新去找一个11连坐的位置，效率都很低。如果没有找到符合要求的作为，那么就没法坐了。</p>
<blockquote>
<p>插入数据和删除数据效率低，插入数据时，这个位置后面的数据在内存中都要向后移。删除数据时，这个数据后面的数据都要往前移动。 比如原来去了5个人，然后后来又去了一个人要坐在第三个位置上，那么第三个到第五个都要往后移动一个位子，将第三个位置留给新来的人。 当这个人走了的时候，因为他们要连在一起的，所以他后面几个人要往前移动一个位置，把这个空位补上。<br>随机读取效率很高。因为数组是连续的，知道每一个数据的内存地址，可以直接找到给地址的数据。<br>并且不利于扩展，数组定义的空间不够时要重新定义数组。</p>
</blockquote>
<h4 id="链表的特点"><a href="#链表的特点" class="headerlink" title="链表的特点"></a>链表的特点</h4><p>在内存中可以存在任何地方，不要求连续。 在电影院几个人可以随便坐。<br>每一个数据都保存了下一个数据的内存地址，通过这个地址找到下一个数据。 第一个人知道第二个人的座位号，第二个人知道第三个人的座位号……<br>增加数据和删除数据很容易。 再来个人可以随便坐，比如来了个人要做到第三个位置，那他只需要把自己的位置告诉第二个人，然后问第二个人拿到原来第三个人的位置就行了。其他人都不用动。</p>
<blockquote>
<p>查找数据时效率低，因为不具有随机访问性，所以访问某个位置的数据都要从第一个数据开始访问，然后根据第一个数据保存的下一个数据的地址找到第二个数据，以此类推。 要找到第三个人，必须从第一个人开始问起。<br>不指定大小，扩展方便。链表大小不用定义，数据随意增删。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">-</th>
<th align="right">数组</th>
<th align="center">链表</th>
</tr>
</thead>
<tbody><tr>
<td align="left">读取</td>
<td align="right">O(1)</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="left">插入、删除</td>
<td align="right">O(n)</td>
<td align="center">O(1)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java原理</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>bind(this)</title>
    <url>/2019/01/20/bind(this)/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1gng8dwqdhyj31oe11ox6r.jpg" alt="beijing1.png"><br><strong>对我来说，好记性不如烂笔记，博客是我的大脑扩容硬盘</strong></p>
<blockquote>
<p>“对我来说，博客首先是一种知识管理工具，其次才是传播工具。我的技术文章，主要用来整理我还不懂的知识。我只写那些我还没有完全掌握的东西，那些我精通的东西，往往没有动力写。炫耀从来不是我的动机，好奇才是。”    -阮一峰</p>
</blockquote>
<h2 id="bind-this-用法解释"><a href="#bind-this-用法解释" class="headerlink" title="bind(this)用法解释"></a>bind(this)用法解释</h2><p>直接上代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* 首先是bind的用法 */</span></span></span><br><span class="line">    alert();</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> post = &#123;<span class="attr">id</span>: <span class="number">1</span>,&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> UI = &#123;</span></span><br><span class="line"><span class="javascript">        render: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.id);<span class="comment">//1</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> r = UI.render.bind(post);<span class="comment">//相当于把post扔到render方法里</span></span></span><br><span class="line">    r();</span><br><span class="line"><span class="javascript">    <span class="comment">/* 再是bind（this）的用法 */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> foo = &#123;</span></span><br><span class="line">        bar: 1,</span><br><span class="line"><span class="javascript">        eventBind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;.someClass&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">/* Act on the event */</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.bar);      <span class="comment">//1</span></span></span><br><span class="line"><span class="javascript">            &#125;.bind(<span class="built_in">this</span>));<span class="comment">//相当于把foo传入click事件</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>相当于bind（this）外面的绑定到里面去了，这样里面就有this.bar的值了。如果不加，就不会有值，里面是undefined</p>
<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><p><a href="http://www.10tiao.com/html/59/201804/2651553996/2.html">es6常用语法</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(target, ...sources)  <span class="comment">//对象拼接</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, o1, o2, o3);<span class="comment">// 最好这样写，最前面加个&#123;&#125;，这样不会覆盖原有的o1,o2,o3的值</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">Object</span>.assign(o3,o2,o1)</span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">// &#123; a: 1, b: 1, c: 1 &#125;  //顺序不同，后面覆盖前面的</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>如何发布blog</title>
    <url>/2014/12/22/hello-world/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1gng9azfjh0j31di0vke82.jpg" alt="stocking.png"><br>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>blog</title>
    <url>/2021/02/08/hexo-next%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E4%B9%8B%E9%87%8D%E8%A3%85%E4%BF%AEblog/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1gng89k2ctjj31me0vo1l0.jpg" alt="panan.png"></p>
<blockquote>
<p>全程都是基于npm，没有使用git方式（除了hexo deploy）</p>
</blockquote>
<blockquote>
<p>基于最新的hexo和next主题升级博客，主要是把配置分离_config.yml 和 _config.next.yml；这样就可以方便hexo和next升级，解决之前升级版本得调很多东西，并且更加简单使用。</p>
</blockquote>
<h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p><a href="https://hexo.io/zh-cn/docs/index.html">使用文档</a>注意在mac中需要sudo打头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><ul>
<li><a href="https://theme-next.js.org/docs/getting-started/">next使用文档</a></li>
<li><a href="https://theme-next.iissnan.com/">next中文使用文档（但不是最新的 最新的以上面为准）</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next &#x2F;&#x2F;在根目录下</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;hexo&#x2F;_config.yml</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://theme-next.js.org/docs/getting-started/configuration.html">主题配置</a>其中需要用到hexo的新版备用配置 <a href="https://hexo.io/docs/configuration.html#Using-an-Alternate-Config">可使用原因</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp node_modules&#x2F;hexo-theme-next&#x2F;_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>
<h3 id="提交到github生成"><a href="#提交到github生成" class="headerlink" title="提交到github生成"></a><a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">提交到github生成</a></h3><p><a href="https://zhuanlan.zhihu.com/p/348581472/">需要提前弄好ssh </a></p>
<p>原理是mac生成一个密钥，然后把密钥加到github上（允许通过），这样git就可以不用输密码就push提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d &#x2F;&#x2F; &#x3D; hexo g hexo d</span><br></pre></td></tr></table></figure>
<h3 id="使用了什么"><a href="#使用了什么" class="headerlink" title="使用了什么"></a>使用了什么</h3><ul>
<li>pjax：这个暂时关闭，因为与gitalk冲突</li>
<li>darkmode：可以根据夜晚变黑</li>
<li><a href="https://xring.info/2018/hexo-category-and-tag-page.html">categories 和 tags 页面</a></li>
<li><a href="https://www.jianshu.com/p/02fc71f3633f">评论:使用默认的gitalk</a></li>
<li><a href="https://blog.csdn.net/qq_43701912/article/details/107018127">加密</a><br><a href="https://github.com/D0n9X1n/hexo-blog-encrypt#encrypt-theme">改进后官方方法</a><br>为了适配微信内置浏览器，只能使用默认主题</li>
<li><a href="https://github.com/iissnan/hexo-theme-next/issues/1742">顶部按钮跟那个百分比</a></li>
</ul>
<h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ul>
<li>如果没写日期，会默认使用创建日期和修改日期</li>
</ul>
<h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><ul>
<li>统计紫薯和阅读量（因为阅读量不多）</li>
<li>谷歌搜索（等文章量上来）</li>
<li>插入网易云音乐（先专注内容，防止别人打开有惊吓音）</li>
</ul>
<h3 id="把生成博客弄到git上"><a href="#把生成博客弄到git上" class="headerlink" title="把生成博客弄到git上"></a>把生成博客弄到git上</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:shinyhero521&#x2F;blog-generate.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git fetch &#x2F;&#x2F;为了刷新下远程的仓库，为了下一个命令做准备</span><br><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;main master &#x2F;&#x2F;前面origin&#x2F;main是fetch之后可以看到的远程仓库 后面master是自己的分支</span><br><span class="line">git pull origin main --allow-unrelated-histories &#x2F;&#x2F;为了解决Git中fatal: refusing to merge unrelated histories</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown示例</title>
    <url>/2018/01/08/markdown%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1fn94zj31b1j30zk0k0wgu.jpg"></p>
<h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**马克飞象**</span><br></pre></td></tr></table></figure>
<p><strong>马克飞象</strong></p>
<h3 id="突出"><a href="#突出" class="headerlink" title="突出"></a>突出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;Ctrl + &#x2F;&#96;</span><br></pre></td></tr></table></figure>
<p><code>Ctrl + /</code></p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br></pre></td></tr></table></figure>
<ul>
<li>第一项</li>
<li>第二项</li>
</ul>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 三人行必有吾师。    —— [孔子](http:&#x2F;&#x2F;baike.baidu.com&#x2F;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>三人行必有吾师。    —— <a href="http://baike.baidu.com/">孔子</a></p>
</blockquote>
<h3 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`Javascript</span></span><br><span class="line"><span class="string">var emp = &#123;	name:&quot;Frank&quot;, age:45 &#125;;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">```Python</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```Java</span><br></pre></td></tr></table></figure>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><table>
<thead>
<tr>
<th align="left">Item</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Computer</td>
<td align="right">5600</td>
<td align="center">5</td>
</tr>
<tr>
<td align="left">Phone</td>
<td align="right">120</td>
<td align="center">12</td>
</tr>
<tr>
<td align="left">Pipe</td>
<td align="right">10</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line">op1&#x3D;&gt;operation: 准备数据</span><br><span class="line">op2&#x3D;&gt;operation: 计算处理</span><br><span class="line">cond1&#x3D;&gt;condition: 是否正确?</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;op2-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;e</span><br><span class="line">cond1(no)-&gt;op1</span><br></pre></td></tr></table></figure>
<h3 id="以及时序图"><a href="#以及时序图" class="headerlink" title="以及时序图:"></a>以及时序图:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">客户端-&gt;服务端: 给我姓名叫张三的员工信息</span><br><span class="line">Note right of 服务端: 服务端响应</span><br><span class="line">服务端--&gt;客户端: 给你张三的信息</span><br></pre></td></tr></table></figure>
<h3 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式"></a>LaTeX 公式</h3><p>可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：</p>
<p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx坑</title>
    <url>/2018/06/07/nginx/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1gng9bi001lj31mi11g4qt.jpg" alt="illustration.png"><br><code>nginx 一定不要放在中文目录下 否则起不来</code></p>
<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="TCP三次握手过程-TCP四次挥手过程"><a href="#TCP三次握手过程-TCP四次挥手过程" class="headerlink" title="TCP三次握手过程+TCP四次挥手过程"></a>TCP三次握手过程+TCP四次挥手过程</h2><p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1fpegrvm16uj30fm0b8dh5.jpg"></p>
<h3 id="为什么一定要三次握手？"><a href="#为什么一定要三次握手？" class="headerlink" title="为什么一定要三次握手？"></a>为什么一定要三次握手？</h3><p>前2次握手<br>如果这2次握手就establish了，有可能服务器端==&gt;客户 网络阻塞，第二次握手没握上，而就开始建立连接了，导致数据丢失。<br>其实这种三次握手就是确保客户端到服务器网络顺畅，服务器到客户网络顺畅，最后客户端向服务器反馈收到</p>
<h3 id="关闭四次挥手"><a href="#关闭四次挥手" class="headerlink" title="关闭四次挥手"></a>关闭四次挥手</h3><p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1fpegk4ix9lj30fk0azwg5.jpg"><br>简单来说就是2次v，客户端首先发出关闭请求，然后等待2MSL，接收到服务器的关闭消息，最后close</p>
<blockquote>
<p>第二次挥手完成后，A到B方向的连接已经释放，B不会再接收数据，A也不会再发送数据。<code>但B到A方向的连接仍然存在，B可以继续向A发送数据。 </code><br>为什么A要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？<br>为了保证B能收到A的确认应答。<br>若A发完确认应答后直接进入CLOSED状态，那么如果该应答丢失，B等待超时后就会重新发送连接释放请求，但此时A已经关闭了，不会作出任何响应，因此B永远无法正常关闭。</p>
</blockquote>
]]></content>
      <categories>
        <category>防坑</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>浪潮招聘(坐标济南)</title>
    <url>/2021/02/19/inspur/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1go7yekounhj30s60hyalz.jpg" alt="内推.png"></p>
<blockquote>
<p>招聘：浪潮软件科技，坐标：济南 浪潮S02<br>欢迎砸简历到：<a href="mailto:haoyunsheng@inspur.com">haoyunsheng@inspur.com</a><br>技术栈：java vue<br>学历要求：全日制统招本科（b+，详情可以带学校咨询）及以上<br>部门刚成立 急缺人，欢迎加入一个乐于分享 有爱互助的团队</p>
</blockquote>
<h3 id="招聘岗位"><a href="#招聘岗位" class="headerlink" title="招聘岗位"></a>招聘岗位</h3><ul>
<li><a href="#%E3%80%90%E7%A0%94%E5%8F%91%E3%80%91"><strong>研发经理/研发工程师 🔥🔥🔥</strong></a></li>
<li><a href="#%E3%80%90%E6%9E%B6%E6%9E%84%E5%B8%88%E3%80%91"><strong>架构师</strong></a></li>
<li><a href="#%E3%80%90%E9%A1%B9%E7%9B%AE%E7%BB%8F%E7%90%86%E3%80%91"><strong>项目经理</strong></a></li>
<li><a href="#%E3%80%90%E8%A1%8C%E4%B8%9A%E4%B8%9A%E5%8A%A1%E4%B8%93%E5%AE%B6%E3%80%91">行业业务专家</a></li>
<li>营销经理</li>
<li><a href="https://zhuanlan.zhihu.com/p/87986882">售前经理🔥🔥🔥</a></li>
<li><a href="https://www.kanzhun.com/duty/21510/">系统项目集成经理🔥🔥🔥</a></li>
</ul>
<h3 id="岗位职责及要求"><a href="#岗位职责及要求" class="headerlink" title="岗位职责及要求"></a>岗位职责及要求</h3><h4 id="【研发】"><a href="#【研发】" class="headerlink" title="【研发】"></a>【研发】</h4><ul>
<li>任职要求：</li>
</ul>
<ol>
<li>全日制大学本科以上学历，计算机、软件工程及相关专业毕业，3-7年Java开发经验，有过大型系统架构设计经历优先；</li>
<li>精通Java、JS/CSS，熟悉前后端分离开发、Redis、MQ等技术，了解SpringBoot+Vue框架、微服务及移动端开发者优先；</li>
<li>熟悉MySQL、PostgreSQL等数据库技术，了解达梦、神通、人大金仓、翰高等数据库运维和调优者优先；</li>
<li>具有良好的团队合作精神，理解和表达能力强，善于沟通；</li>
<li>工作积极主动、责任心强、吃苦耐劳，能承受较大的工作压力，能适应出差。<blockquote>
<p>加分项：</p>
<ul>
<li>熟悉mysql数据库， 具备MySQL索引优化、查询优化， 了解一种以上no sql数据库</li>
<li>熟悉分布式系统，熟练掌握一种以上服务框架和消息中间件，了解其实现原理</li>
<li>抗压能力强，能快速学习，有跨部门技术合作和交流的能力</li>
<li>具有大规模分布式系统的调优经验， 如JVM调优、SQL调优、缓存优化、RPC优化等</li>
<li>具有大规模分布式系统架构设计经验， 熟悉CAP、Consistent Hashing等原理和算法</li>
<li>熟悉多线程编程、IO、垃圾回收</li>
<li>有团队管理经验</li>
</ul>
</blockquote>
</li>
</ol>
<ul>
<li>岗位职责：</li>
</ul>
<ol>
<li>根据项目需求制定和变更应用架构方案；</li>
<li>负责完成系统Code Review的任务，确保相关代码的有效性和正确性，并能够通过Code Review提供相关性能以及安全的建议；</li>
<li>主导技术难题攻关，承担关键研发任务；</li>
<li>参与项目详细需求评审、设计评审和代码评审；</li>
<li>根据公司质控要求负责系统架构的质量保障。</li>
</ol>
<h4 id="【架构师】"><a href="#【架构师】" class="headerlink" title="【架构师】"></a>【架构师】</h4><ul>
<li>任职要求：</li>
</ul>
<ol>
<li>统招本科及以上学历，计算机相关专业，5年以上软件开发经验，3年以上架构设计经验；</li>
<li>具有丰富的系统分析与架构设计实践经验，熟悉高性能、高并发、高可用性、高扩展性系统架构设计；</li>
<li>熟悉但并不限于Spring MVC、Spring Boot、Spring Cloud、Mybatis、Dubbo，Mysql、Redis、MongoDB、ES、MQ、Docker、K8S等技术，为开发团队提供技术方面的指导与培训；</li>
<li>良好的业务思维和产品思维，较强的责任心和执行力；</li>
<li>有团队意识，具备良好的沟通协调能力。</li>
</ol>
<ul>
<li>岗位职责</li>
</ul>
<ol>
<li>负责公司核心系统应用架构规划、设计、技术选型；</li>
<li>负责技术方向与技术架构的搭建，负责与产品、业务沟通技术方案，指导和培训其他工程师，提高团队整体技术水平和工作效率；</li>
<li>负责相关技术规范、使用规范的制定等；</li>
<li>负责对团队开发进度、产品质量进行跟踪与保障，确保产品按时上线，参与重大项目和产品的设计过程，对技术风险领域进行评审和分析。</li>
</ol>
<h4 id="【项目经理】"><a href="#【项目经理】" class="headerlink" title="【项目经理】"></a>【项目经理】</h4><ul>
<li>任职要求：</li>
</ul>
<ol>
<li>统招本科及以上学历，计算机相关专业；</li>
<li>三年以上项目管理经验，熟悉项目全过程管理；</li>
<li>良好的项目谈判、沟通协调、解决问题能力；</li>
<li>能适应出差。</li>
</ol>
<ul>
<li>岗位职责：</li>
</ul>
<ol>
<li>与客户保持良好沟通，了解客户的需求，协助商务进行项目洽谈；</li>
<li>负责统筹项目，高效完成项目交付；</li>
<li>负责项目全过程管理，需求调研，召开项目启动会，制定项目计划，项目过程管控，风险评估，项目上线验收等工作；</li>
<li>维护客户关系，致力于提高客户满意度。</li>
</ol>
<h4 id="【行业业务专家】"><a href="#【行业业务专家】" class="headerlink" title="【行业业务专家】"></a>【行业业务专家】</h4><ul>
<li>任职要求：</li>
</ul>
<ol>
<li>统招本科及以上学历；</li>
<li>五年以上政府信息化服务经验，三年以上行业咨询规划设计经验，对行业发展趋势有较深的理解和洞察；</li>
<li>良好的语言表达能力，呈现能力强，善于捕捉客户需求；</li>
<li>工作责任心强，团队合作意识强，能适应出差。</li>
</ol>
<ul>
<li>岗位职责：</li>
</ul>
<ol>
<li>负责政府信息化行业相关政策研究与分析,辅助市场决策；</li>
<li>负责定期完成行业竞争格局分析,竞品分析,并形成分析报告；</li>
<li>负责行业产品和方向的顶层规划；</li>
<li>负责行业大项目的规划设计；</li>
<li>负责行业新方向的研究探索。</li>
</ol>
]]></content>
      <tags>
        <tag>内推</tag>
      </tags>
  </entry>
  <entry>
    <title>vue父子传值</title>
    <url>/2020/06/21/vue%E7%88%B6%E5%AD%90%E4%BC%A0%E5%80%BC/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1gng8ipk65ej31rq13ae82.jpg" alt="shenghua.png"><br>今天让我写个基于vue的系统管理员授权拆分的功能，一开始我是真的难，非常难过，因为这块代码很乱，功能其实客户需求还是可以的，只不过从原代码改造，非常恶心。</p>
<p>但是经过一下午的努力奋战，<br>我完成了<br>并且我对vue的父子传值有了更深的认识和理解<br>其实就是三把斧<br>很开心</p>
<h3 id="父传子（父页面调子页面）："><a href="#父传子（父页面调子页面）：" class="headerlink" title="父传子（父页面调子页面）："></a>父传子（父页面调子页面）：</h3><h4 id="prop方法"><a href="#prop方法" class="headerlink" title="$prop方法"></a>$prop方法</h4><p><strong>父组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:activeSon</span>=<span class="string">&quot;fatherMethod()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">&#x27;@/components/child&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">fatherMethod</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;father组件&#x27;</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>子组件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;activeBtn&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  props:&#123;</span><br><span class="line">    activeSon:  &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Function</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="literal">null</span></span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">activeBtn</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.activeSon()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="ref方式"><a href="#ref方式" class="headerlink" title="ref方式"></a>ref方式</h4><p><strong>父页面</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;adminList ref&#x3D;&quot;addModule&quot;</span><br><span class="line">                 @func&#x3D;&quot;getmessage&quot; &gt;&lt;&#x2F;adminList&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import adminList from &#39;.&#x2F;set-as-admin-list&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">      adminList</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>在方法里，这里一定要别拉下this.$nextTick(()=&gt;{})</p>
<p>因为这个地方相当于子组件的一个延迟加载方法，否则会报undefined<br>详情原因见 </p>
<p><a href="https://blog.csdn.net/weixin_41888813/article/details/84776896">Vue父组件引用子组件方法显示undefined问题原因及解决方法</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">          this.$refs.addModule.init(this.struId, this.organId, false)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
<p>这里的$refs.addModule,相当于操作dom，就是操作子组件的里面的方法或者值</p>
<p><strong>子页面</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">init (struId, organId, isAdmin) &#123;</span><br><span class="line">       debugger</span><br><span class="line">       this.isAdmin &#x3D; isAdmin</span><br><span class="line">       this.struId &#x3D; struId</span><br><span class="line">       this.organId &#x3D; organId</span><br><span class="line">       this.getPersonList(struId)</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure>
<p>上面就是把父页面的struId，organId，false传给了子页面，并且，还顺便调用了子页面的方法。<br>并且值得注意的是，可以同一个组件在父页面用好几遍，只不过,ref=”不同的值”。</p>
<h5 id="父页面"><a href="#父页面" class="headerlink" title="父页面"></a>父页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">adminList</span> <span class="attr">ref</span>=<span class="string">&quot;authorizationModal&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">func</span>=<span class="string">&quot;getmessage&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">adminList</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><h4 id="子页面"><a href="#子页面" class="headerlink" title="子页面"></a>子页面</h4><p>在方法里</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">this.$emit(&#x27;func&#x27;, data)</span><br></pre></td></tr></table></figure>
<h4 id="父页面去接"><a href="#父页面去接" class="headerlink" title="父页面去接"></a>父页面去接</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">adminList</span> <span class="attr">ref</span>=<span class="string">&quot;authorizationModal&quot;</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">func</span>=<span class="string">&quot;getmessage&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">adminList</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中func是要传的key</p>
<p>value就是用”getmessage”去接收，这里是方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">getmessage (data) &#123;</span><br><span class="line">       this.authorizationVisible = data</span><br><span class="line">  </span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure>
<p>这样就把子页面的data传给了父页面</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Health</title>
    <url>/2018/01/02/%E5%81%A5%E5%BA%B7/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="哦，这是无效的密码,请检查并重试." data-whm="哦，这些解密的内容无法验证，但是您仍然可以看看.">
  <script id="hbeData" type="hbeData" data-hmacdigest="02352f24541dcfcf915a929f7fe3ac6a86e397caf128e776caa8c13c33203025">5cf44de4dd79991d3cc91487a8cab735e97f0602e7333a38caebfae6aeb467255578be7007210aada18dc60ee1f281f10518cf3a8dc0c13f3f5c207f971ea7b7e2101e20438c26be43eea11d3dc3820d6eae437975a77d6f23d155b9f1ec6e4c78d0e55b06486aef0f1d5470d8b586dd145be4af1bdb2d8f6cb4cd86415ffa8e53177535fc0d511812eb6802e9bca9261e16da9695c6ac433f59592964672c776d073fe114c0c1287a8c401823481c8d02e14b56d4ee753a46250ddd3350d9c05b21e1c71d5d76ff48ce77abcb6c30e0617a359a4b725124106d02dba325baf6958bfc5033e7ee7d7bf4fdcbe822c90584ebdbacdbfaec7f13102e2d433bcb3e3bac84c1d307237b68ba29046cfd21bcdb11dd47e2d6cd3edbeb3b778fcf95fcdf6a31089221ce62516a25fd3b598a3cfeb63e1729d5fe27618caafd445dbc6247965ce4ccba24c5648fad121d7382129d36ce1d568f8f1f61c42a8a63728d833bc40e1a8b747376ea768fec66a114051892f72b62b149cd0c7883a8d81b2bdb384f27b1496278b1714d7c7687aa466de11dcd473d0cbb8ef0ac47248bab773389f61441b10d3fd2e1de8134d23d1d2d6e0ff3346869ba2d0acfca3caf89b5c783c37c2a1d8387ee79800d702275a070e5627f54d72e39d2f4070b2396e2a1557a674713d3494d9efe594f85bf26e1ab7b237dbd5122924f60a41af11dd1c65898ad4ae9f7e7860d049434c631a88477b1eb8f9e46f376548e020bf4a2ad457890d9bceecc66853c661632d7f90e02ed45ef8faa4e5c2320626c9f471153eb0d2084229ff038e1b41891d1d5a604a8a84d99ee159394d6ecf46f18bf3fd0b3d30163571891e4d9a118d3990a31b8299466026943c83cd1179723aaa86370cabb9cde11f7b23f773a4853e87f7e7b78c7ba347a126ac1d24fa023e297e2485df2c5ff334b576b6341f66b568457feb080f88c3b51290e4fd5a750274d12cf633254aa645140198dc7a52e329478fa5faca13fc38a80675dcdea6fdd3c6a8489756d5c95a77330954056e8b579ecc0aacb961a7c0a2c65aa9a97d70d70ca72a443f988914c1cd81e3e225b94502ef2ca5e5d4d37ced298ef9df6c84ba88799bd44ce3678affcfc7b0e2604cb6465422af2bf1c581af05ad7e97d8d535c594bdcf431997071a6882ac7bf703bce232b339ab9495e6b129d3c72f158117d83b10ae7eabe47e06fbed817906ce1a5c9f123670e031b59bfdde3a2a8145b077c8ce26701ec559083e5fb7022aca499accf87f11cecfed1007d43c8720b57b51cda99108d8adad1fe85cf17136d18cd39869a157374cee760f47e0877030c4476a12fb23139c15c83cbc21a58ddb8806a30c2510d8fd163429a28368ec3bb4b39e28cb8e8a5be910d50bf8da7bde2015fc30f9f90f7b20ad799bd123b520480f6314b5a776c222945888981467420ff3612ad74703eceaab659db4ade5ac759758d51178f06631568a87c11ec616532614d7e9a3c83db1a1ef51cc0af24528ea2c7b873644693065515c492d5584e77ce45479481d027d8f56f804e74da4a0e4002336139feb3e8feef50540997c817bb34f718753749c74bb37a9a24d005cafdcae312daaa561a3bcf456740487cf3851a9cfac663feb6f3b586033d826fd6482f0ac0636dab040c86f415f801d5ec9ac91857d9e99f6b7b9404925e4c1083427cbe86e777c3b5c68fbac260c5a271b5a7d4ebb083b578d30f789217543e599914b71a1b87515de33329f4444e4debf3131b7f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Abbreviation of my love.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>diary</category>
      </categories>
      <tags>
        <tag>health</tag>
      </tags>
  </entry>
  <entry>
    <title>mac下安装es</title>
    <url>/2019/06/24/%E5%AE%89%E8%A3%85es&amp;kibana/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1gng9d7br1lj321a13y1l1.jpg" alt="Naruto.png"></p>
<h3 id="安装es-amp-kibana"><a href="#安装es-amp-kibana" class="headerlink" title="安装es&amp;kibana"></a>安装es&amp;kibana</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew update</span><br><span class="line"></span><br><span class="line">$ brew install elasticsearch</span><br><span class="line"></span><br><span class="line">$ brew install kibana</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew list &#x2F;&#x2F;查看brew列表</span><br><span class="line">brew uninstall elasticsearch&#x2F;&#x2F;卸载es，这种卸载方法不是很干净，建议通过brew info elasticsearch,找到相关路径，删除之后再重装</span><br><span class="line">brew search elasticsearch&#x2F;&#x2F;查看es版本有哪些</span><br><span class="line">brew install elasticsearch@6.5</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在安装es5.6.16，启动时如果报错，<a href="https://stackoverflow.com/questions/55122277/elasticsearch-5-6-cannot-start-on-mac-os">解决方法</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv elasticsearch.keystore elasticsearch.keystore.old   </span><br><span class="line">elasticsearch-keystore create</span><br></pre></td></tr></table></figure>


<h3 id="中文分词器"><a href="#中文分词器" class="headerlink" title="中文分词器"></a>中文分词器</h3><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/tree/v5.6.0">官方使用文档地址</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;var&#x2F;elasticsearch&#x2F;plugins&#x2F;        &#x2F;&#x2F;这个是插件的目录</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;elasticsearch@5.6&#x2F;5.6.16&#x2F;bin     &#x2F;&#x2F;mac下的es的安装目录</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;elasticsearch-plugin install https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v5.6.16&#x2F;elasticsearch-analysis-ik-5.6.16.zip</span><br><span class="line">&#x2F;&#x2F;首先找到elasticsearch的安装路径，找到bin目录下 然后执行上面</span><br></pre></td></tr></table></figure>
<p>注意要版本一致，我的elasticsearch是5.6.16，那么ik分词器也应该是5.6.16，否则会失败</p>
<h3 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h3><p>而一开始kibana安装好之后你感觉会报错，怎么点都下一步弄不好，其实是因为没有建立好索引，下面是一张和mysql的对比图</p>
<table>
<thead>
<tr>
<th>header 1</th>
<th>Elasticsearch</th>
</tr>
</thead>
<tbody><tr>
<td>Datebases</td>
<td>Indices</td>
</tr>
<tr>
<td>Tables</td>
<td>Types</td>
</tr>
<tr>
<td>Rows</td>
<td>Documents</td>
</tr>
<tr>
<td>Columns</td>
<td>Fields</td>
</tr>
</tbody></table>
<p>用命令建立一个索引之后，然后首页填上索引名称，点击下一步就ok了</p>
<h3 id="elasticsearch-head"><a href="#elasticsearch-head" class="headerlink" title="elasticsearch head"></a>elasticsearch head</h3><p>直接用chrome的插件安装就行，<a href="https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm">ElasticSearch Head</a>，十分简单，开箱即用</p>
<h3 id="使用java开发"><a href="#使用java开发" class="headerlink" title="使用java开发"></a>使用java开发</h3><h4 id="Spring-Data-Elasticsearch与基础版ES的"><a href="#Spring-Data-Elasticsearch与基础版ES的" class="headerlink" title="Spring Data Elasticsearch与基础版ES的"></a>Spring Data Elasticsearch与基础版ES的</h4><p><a href="https://zhuanlan.zhihu.com/p/34487302">关系</a></p>
]]></content>
      <categories>
        <category>es</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>装机心得</title>
    <url>/2020/12/13/%E8%A3%85%E6%9C%BA%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1gng99uo214j31oi15ox6r.jpg" alt="judy.png"></p>
<h3 id="用时16h"><a href="#用时16h" class="headerlink" title="用时16h"></a>用时16h</h3><ul>
<li>小白装机点亮：2020年12月12日 20：00~2020年12月13日 06：00</li>
<li>软件、超频：2020年12月14日 20：00~2020年12月15日 04：00</li>
</ul>
<h3 id="装机"><a href="#装机" class="headerlink" title="装机"></a>装机</h3><ul>
<li>失误/问题</li>
</ul>
<ol>
<li>主板2机箱 有两颗螺丝和其他的不一致</li>
<li>水冷头 用电动螺丝刀 一转手脱了，水冷头甩到主板上，万幸是水冷头仅外侧有个细小划痕，主板没问题</li>
</ol>
<ul>
<li>复盘</li>
</ul>
<ol>
<li>应该提前先把螺丝找到，再无脑安装</li>
<li>这种容易摔的 应该放稳 或者不用电动螺丝刀</li>
</ol>
<ul>
<li>心得</li>
</ul>
<p><code>总算是一键点亮：cpu、gpu等卡扣‘啪’一声很清脆，舒服了</code></p>
<ul>
<li>插入cpu之前先把那个细铁柱打开</li>
<li>风扇的argb是可以串联的，套娃警告</li>
<li>后面理线的确是 一开始能理就理了，因为到后面你线多了 外加累 你搞不清哪个是哪个。所以需要一开始就把一起的给聚到一起：比如开机线那些，一开始就把一起的给绑到一起先</li>
<li>基本所有的接口都有防呆设计（比如L，3针空一针，一侧多出一点），所有的螺丝只要能拧上 很顺畅就行</li>
<li>显卡和内存是最好换的；cpu水冷那块应该也还好，所以更新换代的话 显卡-&gt;内存-&gt;cpu</li>
</ul>
<h3 id="装系统、超频"><a href="#装系统、超频" class="headerlink" title="装系统、超频"></a>装系统、超频</h3><ul>
<li>软件方面</li>
<li>都是去msi官网下载相应驱动</li>
<li>首先安装wifi，老版本的win10不支持，所以需要下载尽量❤新一点系统，msdn itellyou win10 默认的是2015版的 安装wifi巨难，最后下载2020版的win10搞定</li>
<li>安装（升级或降级）bios 是从bios flash安装u盘里下载好的微星官网bios，需要注意的是，安装完bios之后，有可能会找不到固态和硬盘，需要点下开启CSM，BIOS设置里 BOOT MODE： Legacy 跟UEFI 区别</li>
<li>cpu烤机 ：aida64 | cpu-z</li>
<li>显卡烤机：甜甜圈</li>
<li>硬件方面</li>
<li>主板上的电子（电池）是控制主板bios的配置的，如果超频失败，把电池扣下来 就恢复默认了 小时候电脑电子没电 按f1开机就是这么回事</li>
<li>风扇风速是可以从bios中或者msi主板调灯的地方修改</li>
<li>电源的最右下角还有个插argb电源的地方，这样可以把argb串联套娃中间再加一环节</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>京东装机大师</p>
<ul>
<li>cpu ：AMD5800x</li>
<li>显卡：技嘉雪鹰3070 OC (由于高频尖啸 退了 入了 影驰大将 1066)</li>
<li>主板：微星x570</li>
<li>水冷：EK</li>
<li>电源：振华850w ARGB金牌</li>
</ul>
<h3 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h3><blockquote>
<p>鸣谢：公开表示谢意</p>
</blockquote>
<p>码码群：装机大神弟弟</p>
<p>一直陪我安装通宵，其中机箱设计不合理（风扇和水冷头；电源和机械硬盘）；超频；反复直到完美</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>computer</tag>
      </tags>
  </entry>
  <entry>
    <title>TENET</title>
    <url>/2020/09/03/TENET/</url>
    <content><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/006s5QLMly1goeqgik8qoj30h308kmxs.jpg" alt="English-Horizontal---Tenet.jpeg"></p>
<blockquote>
<p>个人最喜欢的电影：时空三部曲：《盗梦空间》、《星际穿越》、《TENET》，都是值得看好几遍的电影</p>
</blockquote>
<blockquote>
<p>二刷《盗梦空间》之前，心中是有一些忐忑的：“《盗梦》，会不会其实没有当初认为的那么好？”然而，当荧幕再次在陀螺将倒未倒之际落下的时候，我又一次，忍不住站起来鼓掌。</p>
</blockquote>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li>进入那个机器就可以切换逆行、正行</li>
<li>来自未来的人地球已经没有资源，他们坚信祖父悖论，要杀死过去的人</li>
<li>有个u型的东西想成u形吸铁石，通过中间的玻璃，可以看到逆行时间（正行时间）的事</li>
</ul>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><blockquote>
<p>可以先看一遍-&gt;解析-&gt;在看一遍</p>
</blockquote>
<p>电影前90分钟，就是典型的特工电影、或者间谍片，几乎让人想起了007。</p>
<p>只不过这位特工，不像007那样风流倜傥，遇见美女没有展开攻势，而是帮助她摆脱自己恶魔般的丈夫。</p>
<p>这里节奏很快，简单覆盘一下：</p>
<h4 id="基辅歌剧院"><a href="#基辅歌剧院" class="headerlink" title="基辅歌剧院"></a>基辅歌剧院</h4><p>主角接到任务，去截获目标，也就是放射性的钸241。</p>
<p>结果任务失败了，钸241被乌克兰特工抢走。</p>
<p>主角被俘后服毒，发现毒药是假的，没死成。</p>
<p>被救后，神祕组织看中了主角的“美队”般的品质，交给了他拯救世界的高级任务，并向他介绍了“TENET天能”。</p>
<p>在“芙蓉姐”（哈利波特与火焰杯里的芙蓉）的神操作下，主角了解逆向武器的存在，芙蓉姐表示这种东西是来自未来，但不知道哪来的。</p>
<p>机智的主角马上联想到，可以透过锻造子弹的材料了解产地，从而获悉这些逆向子弹是出自何方。</p>
<p>他发现子弹的特殊金属，只有印度才有，马上锁定了印度最大的军火商——三婆。</p>
<p>主角透过中间人尼尔找到三婆，对方告知，这种逆向子弹来自俄国寡头萨塔尔。</p>
<p>三婆痛斥这位的俄国人之后，告诉主角，想要接近他，找军情六处帮忙。</p>
<p>军情六处就是麦可·凯恩，这位告诉主角两个资讯：</p>
<p>其一，萨塔尔与基辅剧院劫持案有关，他在找什么东西，但还没有拿到；</p>
<p>其二，几天前检测到了俄国一座废弃城市地下出现爆炸。</p>
<p>凯恩也给主角出了个馊主意，想要接近萨塔尔，就先搞定他老婆。</p>
<h4 id="女主角凯特"><a href="#女主角凯特" class="headerlink" title="女主角凯特"></a>女主角凯特</h4><p>主角伪装成卖画的商人，接近对方身高190cm、还穿着高跟鞋的妻子——凯特。</p>
<p>交谈中主角获悉，凯特因为卖了一幅赝品画给自己老公，而被老公抓住把柄要挟，无法见到自己的孩子。</p>
<p>主角很同情对方，告诉凯特要把画帮她偷出来，而这幅画藏在奥斯陆航空港中一个自由港。</p>
<p>偷画只是幌子，主角和尼尔都坚信，这个自由港里就藏着萨塔尔获得逆向武器的祕密（或者也是放射性物质）。</p>
<p>于是，他们找来帮手，用一架波音747冲进机库大楼，触发警报系统，从而潜入保险库。（这个桥段让人想起了《虎胆龙威3》里，炸地铁实则抢银行的声东击西）</p>
<p>结果二位发现里面除了假画之外，还从一个U型门里出来“两个人”，其中一位还是逆向人。</p>
<p>一顿打斗，主角扎了对方胳膊一刀后让他跑了，啥也没拿到。</p>
<p>主角不甘心，再次找到凯特，直接来到了萨塔尔家里，一番胶着，萨塔尔与主角达成合作协议。</p>
<p>主角帮萨塔尔从乌克兰人手里搞到钸241，条件是让他还凯特自由。</p>
<p>于是，萨塔尔出人，主角出力，在爱沙尼亚首都塔林，一场公路骑劫战开启。</p>
<p>至此，前90分钟，紧张激烈，环环相扣，乃是标准的007式间谍电影，浅显易懂，但随后颠覆。</p>
<h4 id="逆行去奥斯陆"><a href="#逆行去奥斯陆" class="headerlink" title="逆行去奥斯陆"></a>逆行去奥斯陆</h4><p>公路尽头的U型门大战，是全片的转折点，也是最让人懵逼的一段。</p>
<p>结合前文关于正/逆时间的解读，这里要顺一下剧情随后发展的动机。</p>
<p>萨塔尔透过U型门逆向，劫持了妻子，套出了主角关于钸241的下落。</p>
<p>随后给了自己老婆一枪（逆向子弹），并且逆行到过去某个时间点，从主角手里抢走了钸241，朝着过去的时间，逆行而逃。</p>
<p>这里是“过去无法改变”的第一个反映。</p>
<p>与其说是萨塔尔抢走了钸241，倒不如说是主角逆向之后，主动把东西“给”了对方。</p>
<p>海扁王（亚伦·泰勒-强森，大胡子造型我真没认出来他）带着支援部队出现了，这是三婆的队伍，为了阻止萨塔尔颠覆世界的雇佣军。</p>
<p>主角一行人需要回到过去“追上”萨塔尔，但先要救中枪的凯特。</p>
<p>海扁王告诉他，由于她中了逆向子弹，有反向辐射性，这个世界她活不过三个小时。</p>
<p>于是，主角带着凯特透过U型门逆向。</p>
<p>在逆世界里，凯特的伤势有缓，并且他们还要逆行时间再找一个门“正回来”，进行一次“回形针”运动，才可以医治凯特。</p>
<p>于是主角想到了，一周前奥斯陆自由港那个门。</p>
<p>有人问了，他们面前就有一个U型门，为什么还要跑那么远，从这个门再进去，不就正回来？</p>
<p>这不行。</p>
<p>因为他们面前这个门以前在反派手里，是海扁王他们刚刚缴获的。</p>
<p>主角一行人在逆向世界里时间是倒流，假如再次进入这个门，出去就是一大帮敌人，死定了。</p>
<p>所以他们千辛万苦，在逆向世界里熬了好几天，回到一周前的奥斯陆自由港。</p>
<p>这时候主角才明白过味儿来，原来当时跟我对打的那个人是自己，还被自己扎了一刀。</p>
<p>所以逆向的主角还没到目的地的时候，胳膊生疼，一会就开始流血了。</p>
<h4 id="冰冷的汽车"><a href="#冰冷的汽车" class="headerlink" title="冰冷的汽车"></a>冰冷的汽车</h4><p>主角在逆向世界燃烧的车里，差点被冻死，令人印象深刻。</p>
<p>虽然万能的解说员尼尔已经告诉观众原理了，是逆熵，但这里还是要补充一点。</p>
<p>前文说过，逆向世界是熵减，凉水能放热，当然熊熊烈火也会越烧越小自动熄灭。</p>
<p>但问题来了，火是怎么烧起来的？</p>
<p>在逆向世界里，火柴是从燃烧状态复原的。</p>
<p>萨塔尔是怎么点着火的呢？</p>
<p>不要忘了，此时的萨塔尔跟主角一样，也是透过U型门逆向的。</p>
<p>透过这样的转换，整个世界是熵减，但当事人可不是。</p>
<p>主角和反派都是正常状态，他们是来到了逆向的世界，他们可不熵减，他们与这个世界不同步，所以才能点着火。</p>
<p>有个细节，萨塔尔点着汽油之后，出现的火苗是正常的，主角车窗上因为热量产生了水蒸气。</p>
<p>汽车爆炸之后，火苗才变成了逆向，车窗上才开始结冰。</p>
<p>这说明萨塔尔点火那一瞬间，是熵增加的，因为他不属于这个世界。</p>
<p>但着火之后，所产生的火焰才与逆向世界同步，导致汽车结冰。</p>
<p>电影中所有逆向的角色，都是正常的熵增状态，角色状态没变，改变的只是时间逆流之后的世界状态。</p>
<h4 id="毁灭世界的算法"><a href="#毁灭世界的算法" class="headerlink" title="毁灭世界的算法"></a>毁灭世界的算法</h4><p>这里要插播反派萨塔尔的故事，这个家伙是要毁灭世界的。</p>
<p>因为自己得了绝症，他要全世界给自己陪葬。</p>
<p>小时候，这位在俄国废弃的城市回收核废料，结果挖到一个来自未来的时间胶囊，里面有给他的手谕和逆向金条。</p>
<p>他干死了同伴之后，用这些金条发家致富，并把这个废弃的城市变成自己的基地。</p>
<p>未来不断给他打钱发资讯，就是让萨塔尔找到自己所处时代的九个稀有物品，集齐九大稀有物，组成“算法”材料。</p>
<p>算法一旦启动，就可以让整个世界完全逆向，届时所有人会顷刻毁灭。</p>
<p>这个“算法”，是未来从事逆向熵减规律的科学家偶然发现的。</p>
<p>为了避免落到坏人手里，她将算法分成了九份儿，把他们逆向之后送回过去。</p>
<p>但没想到未来世界的坏人，与过去的萨塔尔建立了联系，告诉他未来因为资源匮乏的原因地球已经完蛋了，利用萨塔尔打算报复世界的心理，集齐算法。</p>
<p>未来人想利用祖父悖论，赶紧把过去地球毁掉，这样就不会消耗资源导致未来世界毁灭。</p>
<p>钸241，就是“算法”的九分之一。</p>
<p>在此之前，他已经拿到了算法的其余八份材料，所以，他开始着手准备毁灭世界的计划了。</p>
<p>已知时日无多的萨塔尔，将算法与自己的生命连结，并且设定了一个颇具仪式感的操作：</p>
<p>在自己发家致富的废弃城市的地下矿井引爆炸弹，并用自己的死激活算法。</p>
<p>炸弹只是让算法材料逆向裂变的引信，从而发生一场逆向大爆炸，毁灭世界。</p>
<p>（有点像《黑暗骑士》里的小丑）。</p>
<h4 id="红蓝合作"><a href="#红蓝合作" class="headerlink" title="红蓝合作"></a>红蓝合作</h4><p>救活凯特之后，主角一行人，再次逆行时间，并来到了爆炸当天。</p>
<p>三婆的部队告诉主角一个让他崩溃的事实：我们也有U型门。</p>
<p>主角鼻子差点气歪了：你要早告我你们有门，我就不往奥斯陆跑了。</p>
<p>他们兵分两路——</p>
<p>★主角与尼尔去弃城与萨塔尔的部队交战，要做一次掩人耳目行动，并不阻止炸弹爆炸，而是在炸弹引发算法逆向裂变前，把这玩意偷出来。</p>
<p>★凯特去游艇上阻止萨塔尔自杀，让他不能激活算法，但可以在男主成功后手刃亲夫。</p>
<p>单说主战场，一次完美的时间钳形行动，全片最让人大开眼界的地方。</p>
<p>主角和海扁王在正向部队红队，尼尔在逆向部队蓝队。</p>
<p>（红蓝队各自只有5分钟）</p>
<p>★红队：战前1小时开动员会→依照蓝队经验制定战术→爆炸前10分钟抵达战场→看见蓝队已经打完了→正向进入战斗</p>
<p>★蓝队：战后1小时开动员会→依照红队的线路图制定战术→爆炸后10分钟抵达战场→看见红队已经准备离开了→逆向进入战斗</p>
<p>战斗中，双方有过合作，比如在正逆时间线交汇的一刻，炸掉了一栋楼（前文提到）。</p>
<h4 id="游艇之上"><a href="#游艇之上" class="headerlink" title="游艇之上"></a>游艇之上</h4><p>凯特去游艇上阻止老公自杀，这个老公，正是给了她一枪，然后逆向逃往过去的那位。</p>
<p>也就是说，在当时的时间线上，有两个萨塔尔，一个是属于这个时间段的萨塔尔，但不知道在什么地方浪；</p>
<p>另一位是未来回到过去，打算自杀的萨塔尔，凯特要阻止的是这位。</p>
<p>各位回想一下，凯特第一次见主角时，说起这段往事，是五味杂陈的。</p>
<p>因为当时他们情感已经破裂，但在游艇上对方有些反常，对自己很温柔，似乎“回到以前的时光”。</p>
<p>所以当她回到游艇的时，看到有个女人从船上跳入海里，然后游艇上老公不见了。她说很羡慕那个女人。</p>
<p>其实当时她不知道啊，游艇上这位老公，是从未来回到过去的，而且还对自己开了枪。</p>
<p>凯特忍不住提前杀人，把尸体抛入大海，然而纵身一跃跳入海中。</p>
<p>所以，过去时间线上的她看到从船上往下跳的女人，就是来自未来的自己。</p>
<p>但凯特开枪时，主角正在跟光头佬肉搏。</p>
<p>虽然已经激活了算法，但赶在爆炸之前，把算法带了出去。</p>
<p>好比启动了炸弹倒计时，但在最后一刻剪断了引线一样。</p>
<h4 id="尼尔的身份"><a href="#尼尔的身份" class="headerlink" title="尼尔的身份"></a>尼尔的身份</h4><p>罗伯特帕丁森饰演的尼尔，是一位时间特工，是一位未来回来的人。</p>
<p>因为这场行动之后，使得主角会在未来成立类似一个“时间管理局”的组织，阻止各种时空犯罪，而尼尔是主角在未来某个时段招募的特工。</p>
<p>他经过逆行时间完成了“回形针运动”之后，回到了电影发生的时间（之前）。</p>
<p>尼尔的任务呢，跟《终结者3》里的T800一样，是从未来回来，保护主角的。</p>
<h4 id="这场电影里，尼尔至少救了主角三次"><a href="#这场电影里，尼尔至少救了主角三次" class="headerlink" title="这场电影里，尼尔至少救了主角三次"></a>这场电影里，尼尔至少救了主角三次</h4><ul>
<li>1、开场基辅歌剧院</li>
</ul>
<p>主角身份暴露，一名特工枪指主角。</p>
<p>他身后来了一位黑衣人，用逆向子弹击毙了特工，救了主角。</p>
<p>黑衣人转身离开，主角发现揹包上的红绳吊坠。</p>
<p>黑衣人转身离开，主角发现揹包上的红绳吊坠<br>这是为什么建议大家二刷的原因，尼尔揹包上的红绳吊坠，后面作为标志物出现。</p>
<p>但开场这个细节很容易被忽略，这才是尼尔第一次出场。</p>
<p>由于此时的尼尔用的是逆向子弹，我们可以理解，这时候的尼尔正在处于逆向，他还在朝着过去某个时间点进发。</p>
<p>因为他还要花时间卧底在三婆附近，等待主角主动找上门来。</p>
<p>这样也能解释为什么尼尔会化身为万能解说员，向主角和观众解释逆向世界的原理。</p>
<p>在逆行时间中，也跟没事人一样呼呼大睡。</p>
<p>因为他是从未来一路逆行回来的，早已适应了逆向世界。</p>
<p>他回来，就是为了参与这起行动，并保护主角。</p>
<ul>
<li>2、结尾大战</li>
</ul>
<p>在的逆向部队的尼尔，提前发现了光头佬在矿洞入口安置拌雷，为了保证主角的安危，尼尔脱离了逆向部队，潜入反派的U型门中，把自己正了过来。</p>
<p>但洞口还是被炸塌了，尼尔没能阻止主角进入矿洞。</p>
<p>不过他赶在爆炸前，从天井把主角、海扁王和算法材料一块拽了上来，成功解救主角。</p>
<ul>
<li>3、漫长的告别</li>
</ul>
<p>尼尔把主角拽上来，和主角告别，他再次逆向，这一次他提前潜入了矿洞，隐藏在了爆炸点附近。</p>
<p>然后事发之时，尼尔一路狂奔到事发点，打开了铁门，并在光头佬开枪射杀主角时，替对方挡了一枪，死在了矿洞内。</p>
<p>由于尼尔是逆向运动，所以在主角眼里，尼尔的行为是这样的——</p>
<p>主角来到爆炸点，发现被一个铁门拦路，门内躺着一具死尸，带着呼吸机看不清是谁，但死者揹包上的红绳吊坠看着眼熟。</p>
<p>当光头佬准备射杀主角时，地上的死尸突然动了起来，“死而复生”从地上起来，帮主角挡了一枪，然后还打开了铁门，倒著跑远了。</p>
<p>主角被正向的尼尔拽来出来之后，尼尔表示要回归逆向部队，因为他还有未完成的任务。</p>
<p>这时主角发现，尼尔的揹包上的红绳吊坠，顿时明白怎么回事了，瞬间泪目。</p>
<p>尼尔表示一切都已注定，两位战友，一个正向朝着未来进发，一个将要逆向，朝着过去前进，等待他的结局我们早已知晓。</p>
<p>两位面对面，却处于不同的时间。</p>
<p>所谓咫尺天涯不过如此，他们在时间的洪流中擦肩，就此别过。</p>
<p>但这并不是永别，尼尔告诉主角，是你在未来招募的我。</p>
<p>并说出了全片最让人动容的话：<code>我在起点等着你</code>。</p>
<h3 id="诺兰"><a href="#诺兰" class="headerlink" title="诺兰"></a>诺兰</h3><p>对于《天能》全球仅收3.5亿美元票房收官，诺兰也在Variety采访中亲自表示：「华纳愿意让《天能》在院线发行，现在还能够获得3.5亿美元票房，这一切都让我很感谢又激动，我已经很满足了。我不会拿疫情当作借口，把一切亏损都归咎于病毒因素，我们还会持续找到并制作能够适应全新型态市场的电影，希望我能为重建院线尽一份心力。」听到诺兰这一席谦虚又诚挚的发言，你是否也很庆幸今年可以在电影院享受到《天能》带来的震撼声光和视觉效果呢？</p>
<p>而他的电影剧本，几乎全部由他自己撰写，凭借鲜明的个人风格在全球斩获了惊人的票房。华纳电影等巨头对他青睐有加，斯皮尔伯格评价他为“好莱坞最后一个电影作者”。</p>
<p>诺兰在电影中表达的时空观异常前卫，而拍摄电影的技术和手法上，却显得有些“保守而固执”。</p>
<p>稍微了解过“时空三部曲”制作幕后的观众都知道，诺兰是“实拍狂魔”加“胶片电影捍卫者”。</p>
<p>《盗梦空间》那个旋转的酒店走廊，《星际穿越》中一望无际的玉米田，都是实景而非特效。</p>
<p>到了《信条》，更是登峰造极地买来一架旧的波音飞机，实拍飞机撞击保险库大楼的场面。</p>
<p>波音747撞进大楼<br>这么做，只是为了噱头吗？</p>
<p>当然不。</p>
<p>“实景会让演员有更真实的反应，而不用费尽心思想象周围的环境，这样他们往往会呈现超出预期的表演水平。”诺兰曾在访谈中如是说到。</p>
<h4 id="作品集"><a href="#作品集" class="headerlink" title="作品集"></a>作品集</h4><ul>
<li>《<a href="https://zh.wikipedia.org/wiki/%E8%BF%BD%E9%9A%8F">追随</a>》（1998)</li>
<li>《<a href="https://zh.wikipedia.org/wiki/%E5%87%B6%E5%BF%83%E4%BA%BA">记忆碎片</a>》（2000)</li>
<li>《<a href="https://zh.wikipedia.org/wiki/%E7%99%BD%E5%A4%9C%E8%BF%BD%E5%85%87">失眠症</a>》（2002)</li>
<li>《<a href="https://zh.wikipedia.org/wiki/%E8%9D%99%E8%9D%A0%E4%BF%A0%EF%BC%9A%E9%96%8B%E6%88%B0%E6%99%82%E5%88%BB">蝙蝠侠：侠影之谜</a>》（2005)</li>
<li>《<a href="https://zh.wikipedia.org/wiki/%E9%A0%82%E5%B0%96%E5%B0%8D%E6%B1%BA">致命魔术</a>》（2006)</li>
<li>《<a href="https://zh.wikipedia.org/wiki/%E9%BB%91%E6%9A%97%E9%A8%8E%E5%A3%AB">蝙蝠侠：黑暗骑士</a>》（2008)</li>
<li>《<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E9%9D%A2%E5%95%9F%E5%8B%95">盗梦空间</a>》（2010)</li>
<li>《<a href="https://zh.wikipedia.org/wiki/%E9%BB%91%E6%9A%97%E9%A8%8E%E5%A3%AB%EF%BC%9A%E9%BB%8E%E6%98%8E%E6%98%87%E8%B5%B7">蝙蝠侠：黑暗骑士崛起</a>》（2012)</li>
<li>《<a href="https://zh.wikipedia.org/wiki/%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A">星际穿越</a>》（2014)</li>
<li>《<a href="https://zh.wikipedia.org/wiki/%E6%95%A6%E5%85%8B%E7%88%BE%E5%85%8B%E5%A4%A7%E8%A1%8C%E5%8B%95">敦刻尔克</a>》（2017)</li>
<li>《<a href="https://zh.wikipedia.org/wiki/TENET%E5%A4%A9%E8%83%BD">信条</a>》（2020)<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3></li>
<li><a href="https://www.juksy.com/archives/104649">全球仅收3.5 亿美元票房大赔本，诺兰打破沉默：这样的成绩已让我很激动</a></li>
<li><a href="https://vitomag.com/zhs/entertainment/ldods.html">看不懂电影《TENET天能》？这篇影评分析请收好！</a></li>
<li><a href="https://www.douban.com/group/topic/194491374/">看完时空三部曲，我发现了三个真相</a></li>
</ul>
]]></content>
      <tags>
        <tag>movie</tag>
      </tags>
  </entry>
</search>
